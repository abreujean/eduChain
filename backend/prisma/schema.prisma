generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-custom"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model distributions {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  institution_id       String               @db.Uuid
  amount               Decimal              @db.Decimal(15, 2)
  installment_number   Int
  distribution_date    DateTime             @db.Date
  status               distribution_status? @default(pending)
  transaction_hash     String?
  stellar_operation_id String?
  approved_by          String?              @db.Uuid
  approved_at          DateTime?            @db.Timestamptz(6)
  processed_at         DateTime?            @db.Timestamptz(6)
  notes                String?
  created_at           DateTime             @default(now()) @db.Timestamptz(6)
  updated_at           DateTime             @default(now()) @db.Timestamptz(6)
  profiles             profiles?            @relation(fields: [approved_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  institutions         institutions         @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model foundation_settings {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  setting_key   String   @unique
  setting_value String
  description   String?
  category      String?  @default("general")
  is_active     Boolean? @default(true)
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model institutions {
  id                                             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                           String
  postal_code                                    String
  full_address                                   String
  city                                           String
  state                                          String
  country                                        String?            @default("Brazil")
  type                                           institution_type
  status                                         institution_status @default(eligible)
  student_count                                  Int
  school_days                                    Int
  unit_value                                     Decimal            @db.Decimal(10, 2)
  total_value                                    Decimal?           @default(dbgenerated("(((student_count * school_days))::numeric * unit_value)")) @db.Decimal(15, 2)
  installment_value                              Decimal?           @default(dbgenerated("((((student_count * school_days))::numeric * unit_value) / (8)::numeric)")) @db.Decimal(15, 2)
  stellar_wallet                                 String?            @unique
  manager_id                                     String?            @db.Uuid
  infrastructure_score                           Int?               @default(0)
  has_internet                                   Boolean?           @default(false)
  has_computers                                  Boolean?           @default(false)
  has_library                                    Boolean?           @default(false)
  created_at                                     DateTime           @default(now()) @db.Timestamptz(6)
  updated_at                                     DateTime           @default(now()) @db.Timestamptz(6)
  distributions                                  distributions[]
  donation_details                               donation_details[]
  profiles_institutions_manager_idToprofiles     profiles?          @relation("institutions_manager_idToprofiles", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_institutions_manager")
  monthly_metrics                                monthly_metrics[]
  profiles_profiles_institution_idToinstitutions profiles[]         @relation("profiles_institution_idToinstitutions")
  teachers                                       teachers[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model monthly_metrics {
  id                              String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  institution_id                  String             @db.Uuid
  month                           Int
  year                            Int
  attendance_rate                 Decimal?           @db.Decimal(5, 2)
  nutrition_program_participation Decimal?           @db.Decimal(5, 2)
  community_engagement_score      Int?
  teacher_training_hours          Int?               @default(0)
  eligibility_score               Decimal?           @default(0) @db.Decimal(5, 2)
  validation_status               validation_status? @default(pending)
  validated_by                    String?            @db.Uuid
  validated_at                    DateTime?          @db.Timestamptz(6)
  notes                           String?
  created_at                      DateTime           @default(now()) @db.Timestamptz(6)
  updated_at                      DateTime           @default(now()) @db.Timestamptz(6)
  institutions                    institutions       @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profiles                        profiles?          @relation(fields: [validated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([institution_id, month, year])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id                                                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                               String
  email                                              String            @unique
  encrypted_password                                 String
  role                                               app_role
  institution_id                                     String?           @db.Uuid
  stellar_wallet                                     String?
  permissions                                        String[]          @default([])
  avatar_url                                         String?
  created_at                                         DateTime          @default(now()) @db.Timestamptz(6)
  updated_at                                         DateTime          @default(now()) @db.Timestamptz(6)
  distributions                                      distributions[]
  institutions_institutions_manager_idToprofiles     institutions[]    @relation("institutions_manager_idToprofiles")
  monthly_metrics                                    monthly_metrics[]
  institutions_profiles_institution_idToinstitutions institutions?     @relation("profiles_institution_idToinstitutions", fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model teachers {
  id                  String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  email               String?
  phone               String?
  institution_id      String       @db.Uuid
  subject_areas       String[]     @default([])
  years_experience    Int?         @default(0)
  training_hours      Int?         @default(0)
  certification_level String?
  is_active           Boolean?     @default(true)
  created_at          DateTime     @default(now()) @db.Timestamptz(6)
  updated_at          DateTime     @default(now()) @db.Timestamptz(6)
  institutions        institutions @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model donation_details {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  donation_id    String       @db.Uuid
  institution_id String       @db.Uuid
  net_amount     Decimal      @db.Decimal(15, 2)
  donations      donations    @relation(fields: [donation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  institutions   institutions @relation(fields: [institution_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model donations {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  donor_identifier String
  total_amount     Decimal            @db.Decimal(15, 2)
  transaction_hash String             @unique
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  donation_details donation_details[]
}

enum app_role {
  foundation_manager
  school_manager
}

enum distribution_status {
  pending
  processing
  completed
  failed
}

enum institution_status {
  eligible
  ineligible
}

enum institution_type {
  community_school
  quilombola
  indigenous
}

enum validation_status {
  pending
  approved
  rejected
}
